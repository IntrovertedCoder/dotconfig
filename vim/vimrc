" Custom keybinds {{{
let mapleader = " "

" Open and create files inside files {{{
    " Open file in vertical split
    nnoremap <silent><F11> :vertical wincmd f<CR>
    " Open file in horizontal split
    nnoremap <silent><F12> :wincmd f<CR>
    " Create file and file dir
    nnoremap <silent><leader>gf :e <cfile><CR>
" }}}

" Commenting and uncommenting (Python) {{{
" Without moving {{{
    " Comment line
    nnoremap <silent><leader>w ^<S-i># <Esc><Esc>h
    " Uncomment line
    nnoremap <silent><leader>s ^xx
" }}}
" Moving down {{{
    nnoremap <silent><leader>; ^<S-i># <Esc><Esc>hj
    nnoremap <silent><leader>' ^xxj
" }}}
" Moving up {{{
    nnoremap <silent><leader>[ ^<S-i># <Esc><Esc>hk
    nnoremap <silent><leader>] ^xxk
" }}}
" }}}

" Inserting/removing tab {{{
    " Want to make this have leader but it won't register for some reason
    " Inserting tab
    nnoremap <Tab> ^<S-i><Tab><Esc><Esc>l
    " Removing tab
    nnoremap <S-Tab> ^4h4x
" }}}

" Window Management {{{
    " Window Splitting {{{
        nnoremap <silent><F3> :wincmd v<CR>
        nnoremap <silent><F4> :split<CR>
    " }}}

" Window Selection {{{
    nnoremap <silent><leader>h :wincmd h<CR>
    nnoremap <silent><leader>j :wincmd j<CR>
    nnoremap <silent><leader>k :wincmd k<CR>
    nnoremap <silent><leader>l :wincmd l<CR>
" }}}

" Window Resizing {{{
    " Resizing windows (Leader + ctrl + yuio)
    nnoremap <silent><leader><C-u> :resize -2<CR>
    nnoremap <silent><leader><C-i> :resize +2<CR>
    nnoremap <silent><leader><C-y> :vertical resize -2<CR>
    nnoremap <silent><leader><C-o> :vertical resize +2<CR>
" }}}
" }}}

" Get current song (Space + F2)
" Space+F2 (Doesn't work in WSL)
map <silent><leader><F2> :!deadbeef-vs --nowplaying "\%a - \%t"<CR>

"File explorer
" Space+e
nnoremap <silent><leader>e :Lex!<CR> :vertical resize 40<CR>
" Open ranger with space+shift+e
nnoremap <silent><leader>E :silent !ranger<CR>

" Enabling spellcheck
" Space+c
nnoremap <silent><leader>c :set spell!<CR>

" Yank line
" Space+y
nnoremap <silent><leader>y ^<C-v>$y

" Toggle capitalization under cursor
nnoremap <silent><leader>U v~<esc>

" Quickly insert an empty new line without entering insert mode
" Space+o or space+O
nnoremap <silent><Leader>o o<Esc>
nnoremap <silent><Leader>O O<Esc>

" View weather with darksky api (Functional until end of 2021)
" F2
map <F2> :!weather <CR>

" Replace word under cursor with inputted text over entire file
" Space+r
nmap <leader>r :%s/\<<C-r><C-w>\>//gI<Left><Left><Left>

" Custom word wrapping remap
" Space+z
nnoremap <leader>z 80\|F<space>xi<CR><esc>

" Toggle paste
" Space+p
nnoremap <silent><leader>p :set paste!<CR>

" Insert chat at cursor pos {{{
nnoremap <leader>i i <ESC>r
nnoremap <leader>a a <ESC>r
" }}}
" }}}

" Scrolling/line numbers {{{
    set scrolloff=5
    set number
    set relativenumber
" }}}

" Folding {{{

    " Making folds on commands {{{
        nnoremap <leader>= A{{{<CR><CR>}}}<ESC>k
        inoremap <F3> <space>{{{<CR><CR>}}}<ESC>ki
    " }}}
    set foldmethod=marker
    nnoremap <CR> za
" }}}

" Searching {{{
    set hlsearch
    hi Search ctermbg=81
    nnoremap <leader>q :noh<CR>
" }}}

" Changing swp/bak/undo locations {{{
    set undofile
    set directory^=$HOME/.vim/swp//
    set backupdir^=$HOME/.vim/bak//
    set undodir^=$HOME/.vim/undo//

    " Make dir and pipe normal/error outputs to /dev/null
    silent !mkdir ~/.vim/swp/ > /dev/null 2>&1
    silent !mkdir ~/.vim/bak/ > /dev/null 2>&1
    silent !mkdir ~/.vim/undo/ > /dev/null 2>&1
" }}}

" Github keybinds {{{
    " Show git commit that added line
    map <silent><Leader>g :call setbufvar(winbufnr(popup_atcursor(systemlist("cd " . shellescape(fnamemodify(resolve(expand('%:p')), ":h")) . " && git log --no-merges -n 1 -L " . shellescape(line("v") . "," . line(".") . ":" . resolve(expand("%:p")))), { "padding": [1,1,1,1], "pos": "botleft", "wrap": 0 })), "&filetype", "git")<CR>
    nnoremap <silent><leader>t :silent !lazygit<CR> :redraw!<CR>
    nnoremap <silent><leader>b :silent !git push<CR> :redraw!<CR>
" }}}

" Tabbing {{{
    set softtabstop=4 shiftwidth=4
    set tabstop=4
    set expandtab
    set autoindent
    let g:indentLine_char_list = ['|', '¦', '┆', '┊']
    " retab
" }}}

" Coding {{{
" Python {{{
    " Python Compiler {{{
        augroup pythonStuffz
            " For anything other then WSL use 3.8 or 3.7
            au BufEnter *.py38 map <F7> <esc>:w\|!python3.8 "%"<CR>
            au BufEnter *.py37 map <F7> <esc>:w\|!python3.7 "%"<CR>
            au BufEnter *.py36 map <F7> <esc>:w\|!python3.6 "%"<CR>
            au BufEnter *.py35 map <F7> <esc>:w\|!python3.5 "%"<CR>
            " Default python editor
            au BufEnter *.py map <F7> <esc>:w\|!python3.8 "%"<CR>
        augroup END
        " Added space+F7 to open a python idle
        nnoremap <silent><leader><F7> :silent !python3<CR>
    " }}}
    " Java Compiler {{{
        augroup javaStuff
            func Eatchar(pat)
                let c = nr2char(getchar(0))
                return (c =~ a:pat) ? '' : c
            endfunc
            au BufEnter *.java map <F7> <esc>:w\|!java "%"<CR>
            iabbrev <silent> print System.out.print(<c-r>=Eatchar('\m\s\<bar>/')<cr>
            iabbrev <silent> println System.out.println(<c-r>=Eatchar('\m\s\<bar>/')<cr>
        augroup END
    " }}}
    " Detecting filetypes based off ext {{{
        augroup filetypePython
            au BufNewFile,BufRead *.py38 set filetype=python
            au BufNewFile,BufRead *.py37 set filetype=python
            au BufNewFile,BufRead *.py36 set filetype=python
            au BufNewFile,BufRead *.py35 set filetype=python
        augroup END
    " }}}
    " C {{{
        augroup filetypeC
            au BufEnter *.c map <F7> <esc>:w\|!c "%"<CR>
        augroup END
    " }}}
" }}}

" }}}

" Unmapping {{{
    " nnoremap Q <nop>
    " nnoremap q <nop>
" }}}

" Theming {{{
    " Colorscheme {{{
        set termguicolors
        colorscheme monokai-bold
        syntax on
    " }}}

    " Statusline {{{
        set statusline=
        set statusline+=%#PmenuSel#
        set statusline+=\ %M
        set statusline+=\ %r
        set statusline+=\ %F
        set statusline+=%= " Right side settings
        set statusline+=\ %l:%L
        set statusline+=\ %p%%
        set laststatus=2  " Enable status line for all files
    " }}}

" Color column {{{
    set colorcolumn=80
    highlight ColorColumn ctermbg=232
    highlight ColorColumn guibg=#100F0F
" }}}
" }}}

" Plugin Keybinds {{{
    " Colorizer {{{
        " Sets space+m to toggle colorizing
        nnoremap <silent><leader>m :ColorToggle<CR>
        " Sets space+8 to convert rgb to xterm colors
        nnoremap <silent><leader>8 :RGB2Term #
        " Sets space+9 to convert from xterm to rgb colors
        nnoremap <silent><leader>9 :Term2RGB<SPACE>
    " }}}

    " Undotree {{{
        " Set to right side
        let g:undotree_WindowLayout=3
        " Maps undotree to space+u along with resizing to be 30 spaces
        nnoremap <silent><leader>u :UndotreeToggle<CR> :wincmd h<CR> :vertical resize 86<CR>
    " }}}
" }}}

" Random {{{

    " See invisible characters
    set list listchars=tab:\|\ ,trail:+,eol:$

    set visualbell
    set title

    " Better word wrapping to prevent words from being split in the middle
    set linebreak

    " Remove trailing whitespace
    autocmd BufWritePre * :%s/\s\+$//e

    " Setting default encryption method
    set cm=blowfish2
" }}}

" Abolish Keybinds {{{

    function TempDefine()
        call Define()
        autocmd InsertLeave call Undefine()
        autocmd!
    endfunction

    function Define()

    " Greek letters {{{
        Abolish {a,A,b,B,g,G,d,D,e,E,z,Z,y,Y,h,H,i,I,k,K,l,L,m,M,n,N,c,C,o,O,p,P,r,R,s,S,t,T,u,U,f,F,x,X,q,Q,w,W}g <C-k>{}*
    " }}}

    " Math stuff {{{
        " sqrt
        Abolish sqrt √

        " Infinty
        Abolish {00,inf} ∞

        " Greater then/Lesser then signs
        iabbrev => ≤
        iabbrev =< ≥
        iabbrev =3 ≡

        " Fractions from ½-⅛
        Abolish {0,1,2,3,4,5,6,7,8,9}f{0,1,2,3,4,5,6,7,8,9} <C-k>{}{}

       " Superscript/subscript numbers {{{
        Abolish {0,1,2,3,4,5,6,7,8,9}{S,s} <C-k>{}{}
        iabbrev -S <C-k>-S
        iabbrev -s <C-k>-s
        iabbrev +S <C-k>+S
        iabbrev +s <C-k>+s
        iabbrev =S <C-k>=S
        iabbrev =s <C-k>=s
        iabbrev (S <C-k>(S
        iabbrev (s <C-k>(s
        iabbrev )S <C-k>)S
        iabbrev )s <C-k>)s
       " }}}
    " }}}

    endfunction

    function Undefine()
        " Fractions from ½-⅛
        Abolish -delete {0,1,2,3,4,5,6,7,8,9}f{0,1,2,3,4,5,6,7,8,9}
        " Greek letters
        Abolish -delete {a,A,b,B,g,G,d,D,e,E,z,Z,y,Y,h,H,i,I,k,K,l,L,m,M,n,N,c,C,o,O,p,P,r,R,s,S,t,T,u,U,f,F,x,X,q,Q,w,W}g
    endfunction
" }}}

" TODO text highlight {{{
    highlight 1 ctermbg=9 ctermfg=black
    highlight 1 guibg=#F25757 guifg=#0DA8A8
    call matchadd("1", "{1}")
    nnoremap <leader>1 i{1} <ESC>

    highlight 2 ctermbg=202 ctermfg=black
    highlight 2 guibg=#E2656A guifg=#1D9A95
    call matchadd("2", "{2}")
    nnoremap <leader>2 i{2} <ESC>

    highlight 3 ctermbg=208 ctermfg=black
    highlight 3 guibg=#D1737C guifg=#2E8C83
    call matchadd("3", "{3}")
    nnoremap <leader>3 i{3} <ESC>

    highlight 4 ctermbg=11 ctermfg=black
    highlight 4 guibg=#C1828F guifg=#3E7D70
    call matchadd("4", "{4}")
    nnoremap <leader>4 i{4} <ESC>

    highlight 5 ctermbg=118 ctermfg=black
    highlight 5 guibg=#B190A2 guifg=#4E6F5D
    call matchadd("5", "{5}")
    nnoremap <leader>5 i{5} <ESC>

    highlight 6 ctermbg=10 ctermfg=black
    highlight 6 guibg=#A09EB4 guifg=#5F614B
    call matchadd("6", "{6}")
    nnoremap <leader>6 i{6} <ESC>

    highlight 7 ctermbg=47 ctermfg=black
    highlight 7 guibg=#90ACC7 guifg=#6F5338
    call matchadd("7", "{7}")
    nnoremap <leader>7 i{7} <ESC>

    highlight 8 ctermbg=45 ctermfg=black
    highlight 8 guibg=#80BBDA guifg=#7F4425
    call matchadd("8", "{8}")
    nnoremap <leader>8 i{8} <ESC>

    highlight 9 ctermbg=27 ctermfg=black
    highlight 9 guibg=#6FC9EC guifg=#903613
    call matchadd("9", "{9}")
    nnoremap <leader>9 i{9} <ESC>

    highlight 0 ctermbg=4 ctermfg=220
    highlight 0 guibg=#5FD7FF guifg=#A02800
    call matchadd("0", "{0}")
    nnoremap <leader>0 i{0} <ESC>
    " Grep keybind {{{
        " Search for all
        nnoremap <leader>` /{[0-9]}<CR>
        " Specific keybinds {{{
            nnoremap <leader>! /{1}<CR>
            nnoremap <leader>@ /{2}<CR>
            nnoremap <leader># /{3}<CR>
            nnoremap <leader>$ /{4}<CR>
            nnoremap <leader>% /{5}<CR>
            nnoremap <leader>^ /{6}<CR>
            nnoremap <leader>& /{7}<CR>
            nnoremap <leader>* /{8}<CR>
            nnoremap <leader>( /{9}<CR>
            nnoremap <leader>) /{0}<CR>
        " }}}
    " }}}
" }}}

nnoremap <F12> :source ~/.vimrc<CR>
nnoremap <F11> :call Define()<CR>
